#!/usr/bin/env python
"""Main scripts for releasing a new version of chalice.

You just specify what type of release you'd like::

    scripts/release/new-release --release-type patch
    scripts/release/new-release --release-type minor

Beware, this script will push changes to github and pypi!

This script performs these steps:

* Bumps versions numbers where necessary.
* Commits and tags the release in git.
* Creates an sdist and wheel file
* Push commits/tags to upstream/master
* Uploads sdist/whl files to pypi

This script primarily shells out to other scripts for its main
logic.  If you want to test things out or perform each step manually
you can call the other scripts in this ./release directory:

* bump-version - Figures out next version number and updates necessary files
* tag-release - Tags the release based on the current version in setup.py
* get-version - Prints the version number based on setup.py
* build-release - Creates the sdist/whl files in dist/

"""
import os
import argparse
import glob
import subprocess


ROOT_DIR = os.path.dirname(
    os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
)


def run_release_script(*command):
    converted_command = [os.path.join(ROOT_DIR, 'scripts',
                                      'release', command[0])]
    converted_command.extend(command[1:])
    return run_command(*converted_command)


def run_command(*command):
    p = subprocess.Popen(command, stdout=subprocess.PIPE,
                         stderr=subprocess.STDOUT)
    stdout = p.communicate()[0]
    if p.returncode != 0:
        raise RuntimeError("Received rc %s for command: %s" % (
            p.returncode, command))
    return stdout


def do_release(args):
    run_release_script('bump-version', '--release-type', args.release_type)
    version = run_release_script('get-version').strip()
    run_command('git', 'commit', '-am', 'Bumping version to %s' % version)
    run_release_script('tag-release')
    run_release_script('build-release')
    release_artifacts = glob.glob(os.path.join(ROOT_DIR, 'dist',
                                               'chalice-%s[-.]*' % version))
    run_command('git', 'push', 'upstream', 'master', '--tags')
    run_command('twine', 'upload', *release_artifacts)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-r', '--release-type', choices=('patch', 'minor'),
                        required=True,
                        help=('The type of release to perform.  '
                              'This controls the version number.'))
    args = parser.parse_args()
    do_release(args)


if __name__ == '__main__':
    main()
